function deposit(uint256 _amount, address _referrer) external {
    require(launched == true, "Contract is not launched yet.");
    require(_amount > 0, "You need to deposit more than 0 BUSD.");

    if (_referrer == msg.sender) {
        _referrer = address(0);
    }
    IERC20(BUSDContract).safeTransferFrom(msg.sender, address(this), _amount);

    uint256 _id = _getNextDepositID();
    _incrementDepositID();

    uint256 depositFee = (_amount * developerFee) / percentRate;
    // Transfer dev fee to dev wallet.
    IERC20(BUSDContract).safeTransfer(devWallet, depositFee);

    uint256 _depositAmount = _amount - depositFee;

    depositState[_id].investor = msg.sender;
    depositState[_id].depositAmount = _depositAmount;
    depositState[_id].depositAt = block.timestamp;
    depositState[_id].claimedAmount = getExistingRewards(msg.sender); // Assign existing rewards
    depositState[_id].state = true;
    depositState[_id].claimed = false;

    if (investors[msg.sender].investor == address(0)) {
        totalInvestors = totalInvestors.add(1);
        investors[msg.sender].investor = msg.sender;
        investors[msg.sender].startTime = block.timestamp;
        investors[msg.sender].lastCalculationDate = block.timestamp;
    }

    if (address(0) != _referrer && investors[msg.sender].referrer == address(0)) {
        investors[msg.sender].referrer = _referrer;
    }

    if (investors[msg.sender].referrer != address(0)) {
        uint256 referrerAmount = (_amount * referrerReward) / percentRate;
        investors[investors[msg.sender].referrer].referAmount = investors[investors[msg.sender].referrer].referAmount.add(referrerAmount);
        IERC20(BUSDContract).transfer(investors[msg.sender].referrer, referrerAmount);
    }

    investors[msg.sender].totalLocked = investors[msg.sender].totalLocked.add(_depositAmount);
    investors[msg.sender].lastCalculationDate = block.timestamp;

    totalInvested = totalInvested.add(_amount);

    ownedDeposits[msg.sender].push(_id);
    emit Deposit(_id, msg.sender);
}
